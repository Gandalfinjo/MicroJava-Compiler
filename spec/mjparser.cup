package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import rs.ac.bg.etf.pp1.ast.*;

parser code {:
	public void report_fatal_error(String message, Object info) throws java.lang.Exception {
		done_parsing();
		report_error(message, info);
	}
	
	public void syntax_error(Symbol cur_token) {
		report_error("\nSintaksna greska", cur_token);
	}
	
	public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
		report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
	}
	
	public void report_error(String message, Object info) {
		StringBuilder msg = new StringBuilder(message);
		
		if (info instanceof Symbol)
			msg.append(" na liniji ").append(((Symbol)info).left);
		
		System.err.println(msg.toString());
	}
:}

scan with {:
	Symbol s = this.getScanner().next_token();
	
	if (s != null && s.value != null)
		System.out.println(s.toString() + " " + s.value.toString());
		
	return s;
:}

terminal PROG, BREAK, CLASS, IF, ELSE, CONST, NEW, PRINT;
terminal READ, RETURN, VOID, EXTENDS, CONTINUE, UNION, DO;
terminal WHILE, MAP, INTERFACE;
terminal PLUS, MINUS, STAR, SLASH, PERCENTAGE;
terminal EQUAL, NOT_EQUAL;
terminal HIGHER, HIGHER_EQUAL, LOWER, LOWER_EQUAL;
terminal AND, OR, ASSIGN, INCREMENT, DECREMENT;
terminal SEMICOLON, COLON, COMMA, DOT;
terminal OPEN_PARENTHESIS, CLOSED_PARENTHESIS;
terminal OPEN_BRACKET, CLOSED_BRACKET;
terminal OPEN_BRACE, CLOSED_BRACE;
terminal BOOL_CONST, CHAR_CONST;
terminal Integer NUMBER_CONST;
terminal String IDENT;

nonterminal Program;
nonterminal DeclList, Decl;
nonterminal VarDeclList, VarDecl, VarDeclExtendedList, VarDeclExtended;
nonterminal MethodDeclList, MethodDecl, MethodSignature;
nonterminal Type;
nonterminal StatementList, Statement;
nonterminal DesignatorStatement, DesignatorStatementTail, DesignatorStatementList, Designator, DesignatorTail;
nonterminal ElseStatement;
nonterminal NumConstList;
nonterminal DoWhileOption;
nonterminal ActPars, ActParsOption, ActParsInner;
nonterminal FormPars, FormParamList, FormParamArray, FormParamExtendedList, FormParamExtended;
nonterminal ConstDecl, ConstDeclValue, ConstDeclExtendedList, ConstDeclExtended;
nonterminal ClassDecl, ClassMemberList, ClassMember;
nonterminal ExtendsType;
nonterminal InterfaceDecl, InterfaceMemberList, InterfaceMember;
nonterminal CondFact, CondFactTail, CondTerm, CondFactList, Condition, CondTermList;
nonterminal Expr, ExprsExtended;
nonterminal Term;
nonterminal Factor, NewFactorTail;
nonterminal MulopFactorList, MulopFactor;
nonterminal AddopTermList, AddopTerm;
nonterminal Label;
nonterminal Assignop, Relop, Addop, Mulop, Setop;

precedence left ELSE;

Program ::= (Program) PROG IDENT DeclList OPEN_BRACE MethodDeclList CLOSED_BRACE;

DeclList ::= (Declarations) DeclList Decl
				|
				(NoDeclarations) /* epsilon */
				;
Decl ::= (ConstD) ConstDecl
				|
				(VarD) VarDecl
				|
				(ClassD) ClassDecl
				|
				(InterfaceD) InterfaceDecl
				;

ConstDecl ::= (ConstDeclaration) CONST Type IDENT ASSIGN ConstDeclValue ConstDeclExtendedList SEMICOLON;
ConstDeclValue ::= (NumberConst) NUMBER_CONST
				|
				(CharConst) CHAR_CONST
				|
				(BoolConst) BOOL_CONST
				;
ConstDeclExtendedList ::= (ConstDeclarationsExtended) ConstDeclExtendedList ConstDeclExtended
				|
				(NoConstDeclarationsExtended) /* epsilon */
				;
ConstDeclExtended ::= (ConstDeclarationExtended) COMMA IDENT ASSIGN ConstDeclValue;

VarDeclList ::= (VarDeclarations) VarDeclList VarDecl
				|
				(NoVarDeclarations) /* epsilon */
				;
VarDecl ::= (VarDeclaration) Type IDENT VarDeclExtendedList SEMICOLON
				|
				(VarDeclarationArray) Type IDENT OPEN_BRACKET CLOSED_BRACKET VarDeclExtendedList SEMICOLON
				;
VarDeclExtendedList ::= (VarDeclarationsExtended) VarDeclExtendedList VarDeclExtended
				|
				(NoVarDeclarationsExtended) /* epsilon */
				;
VarDeclExtended ::= (VarDeclarationExtended) COMMA IDENT
				|
				(VarDeclarationExtendedArray) COMMA IDENT OPEN_BRACKET CLOSED_BRACKET
				;

ClassDecl ::= (ClassDeclaration) CLASS IDENT ExtendsType OPEN_BRACE VarDeclList ClassMemberList CLOSED_BRACE;
ClassMemberList ::= (ClassMembers) OPEN_BRACE MethodDeclList CLOSED_BRACE
				| (NoClassMembers) /* epsilon */
				;
ExtendsType ::= (ClassExtension) EXTENDS Type
				|
				(NoClassExtension) /* epsilon */
				;

InterfaceDecl ::= (InterfaceDeclaration) INTERFACE IDENT OPEN_BRACE InterfaceMemberList CLOSED_BRACE;
InterfaceMemberList ::= (InterfaceMembers) InterfaceMemberList InterfaceMember
				|
				(NoInterfaceMembers) /* epsilon */
				;
InterfaceMember ::= (InterfaceMethodDeclaration) MethodDecl
	 			|
	 			(InterfaceMethodSignature) MethodSignature SEMICOLON
	 			;

MethodDeclList ::= (MethodDeclarations) MethodDeclList MethodDecl
				|
				(NoMethodDeclarations) /* epsilon */
				;
MethodDecl ::= (MethodDeclaration) MethodSignature VarDeclList OPEN_BRACE StatementList CLOSED_BRACE;
MethodSignature ::= (TypeMethodSignature) Type IDENT OPEN_PARENTHESIS FormPars CLOSED_PARENTHESIS
				|
				(VoidMethodSignature) VOID IDENT OPEN_PARENTHESIS FormPars CLOSED_PARENTHESIS
				;
				
FormPars ::= (FormParams) FormParamList
				|
				(NoFormParams) /* epsilon */
				;
FormParamList ::= (FormParamList) Type IDENT FormParamArray FormParamExtendedList;
FormParamArray ::= (FormArrayBrackets) OPEN_BRACKET CLOSED_BRACKET
				|
				(NoFormArrayBrackets) /* epsilon */
				;
FormParamExtendedList ::= (ExtendedFormParamList) FormParamExtendedList FormParamExtended
				|
				(NoExtendedFormParamList) /* epsilon */
				;
FormParamExtended ::= (FormParamExtendedNormal) COMMA Type IDENT
				|
				(FormParamExtendedArary) COMMA Type IDENT OPEN_BRACKET CLOSED_BRACKET
				;

Type ::= (Type) IDENT;

StatementList ::= (Statements) StatementList Statement
				|
				(NoStatements) /* epsilon */
				;
Statement ::= (DesignatorStmt) DesignatorStatement SEMICOLON
				|
				(IfStatement) IF OPEN_PARENTHESIS Condition CLOSED_PARENTHESIS Statement ElseStatement
				|
				(BreakStatement) BREAK SEMICOLON
				|
				(ContinueStatement) CONTINUE SEMICOLON
				|
				(ReturnStatement) RETURN SEMICOLON
				|
				(ReturnExprStatement) RETURN Expr SEMICOLON
				|
				(ReadStatement) READ OPEN_PARENTHESIS Designator CLOSED_PARENTHESIS SEMICOLON
				|
				(PrintStatement) PRINT OPEN_PARENTHESIS Expr NumConstList CLOSED_PARENTHESIS SEMICOLON
				|
				(DoWhileStatement) DO Statement WHILE OPEN_PARENTHESIS DoWhileOption CLOSED_PARENTHESIS SEMICOLON
				|
				(MultipleStatements) OPEN_BRACE StatementList CLOSED_BRACE
				;
				
ElseStatement ::= (YesElseStatement) ELSE Statement
				| 
				(NoElseStatement) /* epsilon */
				;
				
DoWhileOption ::= (YesDoWhileOption) Condition DesignatorStatementList
				|
				(NoDoWhileOption) /* epsilon */
				;
				
NumConstList ::= (NumConsts) COMMA NUMBER_CONST NumConstList
				|
				(NoNumConsts) /* epsilon */
				;
				
DesignatorStatement ::= (OptionalDesignatorStatement) Designator DesignatorStatementTail
				|
				(FixedDesignatorStatement) Designator Assignop Designator Setop Designator
				;
DesignatorStatementTail ::= (AssignopExprDSTail) Assignop Expr
				|
				(ActParsDSTail) OPEN_PARENTHESIS ActParsInner CLOSED_PARENTHESIS
				|
				(IncrementDSTail) INCREMENT
				|
				(DecrementDSTail) DECREMENT
				;
DesignatorStatementList ::= (DesignatorStatements) COMMA DesignatorStatement DesignatorStatementList
				|
				(NoDesignatorStatements) /* epsilon */
				;
				
ActPars ::= (ActParams) Expr ExprsExtended;
ActParsOption ::= (ActParamsOption) OPEN_PARENTHESIS ActParsInner CLOSED_PARENTHESIS
				|
				(NoActParamsOption) /* epsilon */
				;
ActParsInner ::= (ActParamsInner) ActPars
				|
				(NoActParamsInner) /* epsilon */
				;
				
Condition ::= (Condition) CondTerm CondTermList;
CondTermList ::= (CondTerms) OR CondTerm CondTermList
				|
				(NoCondTerms) /* epsilon */
				;
CondTerm ::= (CondTerm) CondFact CondFactList;		
CondFactList ::= (CondFacts) AND CondFact CondFactList
				|
				(NoCondFacts) /* epsilon */
				;
CondFact ::= (CondFact) Expr CondFactTail;
CondFactTail ::= (RelopCondFactTail) Relop Expr
				|
				(NoCondFactTail) /* epsilon */
				;

ExprsExtended ::= (ExprsExtendedList) COMMA Expr ExprsExtended
				|
				(NoExprsExtendedList) /* epsilon */
				;		
Expr ::= (NoSignExpr) Term AddopTermList
				|
				(NegativeSignExpr) MINUS Term AddopTermList
				|
				(DesignatorExpr) Designator MAP Designator
				;
				
AddopTermList ::= (AddopTerms) AddopTermList AddopTerm
				|
				(NoAddopTerms) /* epsilon */
				;
AddopTerm ::= (AddopTerm) Addop Term;

Term ::= (Term) Factor MulopFactorList;

MulopFactorList ::= (MulopFactors) MulopFactorList MulopFactor
				|
				(NoMulopFactors) /* epsilon */
				;
MulopFactor ::= (MulopFactor) Mulop Factor;

Factor ::= (DesignatorFactor) Designator ActParsOption
				|
				(NumFactor) NUMBER_CONST
				|
				(CharFactor) CHAR_CONST
				|
				(BoolFactor) BOOL_CONST
				|
				(NewFactor) NEW Type NewFactorTail
				|
				(ExprFactor) OPEN_PARENTHESIS Expr CLOSED_PARENTHESIS
				;
NewFactorTail ::= (ExprFactorTail) OPEN_BRACKET Expr CLOSED_BRACKET
				|
				(ActParsFactorTail) OPEN_PARENTHESIS ActParsInner CLOSED_PARENTHESIS
				;
				
Designator ::= (Designator) IDENT DesignatorTail;
DesignatorTail ::= (DotDesignatorTail) DOT IDENT DesignatorTail
				|
				(ExprDesignatorTail) OPEN_BRACKET Expr CLOSED_BRACKET DesignatorTail
				|
				(NoDesignatorTail) /* epsilon */
				;

Label ::= (Label) IDENT;

Assignop ::= (Assignop) ASSIGN;

Relop ::= (Equals) EQUAL
				| (NotEquals) NOT_EQUAL
				| (Higher) HIGHER
				| (HiglerEqual) HIGHER_EQUAL
				| (Lower) LOWER
				| (LowerEqual) LOWER_EQUAL
				;
				
Addop ::= (Plus) PLUS | (Minus) MINUS;

Mulop ::= (Multiplication) STAR | (Division) SLASH | (Modulo) PERCENTAGE;

Setop ::= (Setop) UNION;